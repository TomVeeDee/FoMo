/**
\mainpage This is the extensive help page for FoMo

\section Implementation

(This is a copy of the "instrument" paper on FoMo, published in Frontiers in Astronomy and Space Sciences. Please refer to the <a href="http://journal.frontiersin.org/article/10.3389/fspas.2016.00004/full">open access publication</a>.)

The corona is optically thin, and thus the specific intensity \f$I(\lambda,x',y')\f$ (in \f$\mbox{ergs cm}^{-2} \mbox{s}^{-1} \mbox{sr}^{-1} \AA{}^{-1}\f$) at a wavelength \f$\lambda\f$ is the integral of the monochromatic emissivity \f$\epsilon(\lambda,x,y,z)\f$ at each point along the LOS. Let us assume that the LOS is along a given \f$z'\f$ axis, that may not be aligned to any of the numerical axes.
\f{equation}{
	I(\lambda,x',y')=\int \epsilon(\lambda,x(z'),y(z'),z(z')) dz'.
	\label{eq:int}
\f}
Here \f$(x,y,z)\f$ are the coordinates in the original simulation, and \f$(x',y',z')\f$ are the coordinates in the rotated frame of reference of the observation. \f$(x',y')\f$ are the coordinates in the image plane (also known as the plane-of-the-sky, or POS), and \f$z'\f$ is the direction along the LOS. The two coordinate systems are connected by two rotations, first an angle \f$l\f$ around the \f$z\f$-axis, then around an angle \f$-b\f$ around the \f$y\f$-axis:
\f{equation}{
	\begin{pmatrix} x' \\ y' \\ z'\end{pmatrix}=\begin{pmatrix} \cos{b} & 0 & -\sin{b} \\ 0&1&0\\ \sin{b} & 0 & \cos{b}\end{pmatrix}\begin{pmatrix} \cos{l} & -\sin{l} &0\\ \sin{l} & \cos{l} &0\\ 0&0&1\end{pmatrix} \begin{pmatrix} x\\y\\z\end{pmatrix}.
	\label{eq:angle}
\f}
The viewing angles are set as argument of the FoMo::FoMoObject.render() function.
The simulation box with grid \f$(x,y,z)\f$ is considered as the input, and is the data for which the forward model needs to be computed. There the input model needs to contain the \f$x-, y-, z-\f$coordinates of each data point, and specify the number density \f$n_\mathrm{e}\f$, the temperature \f$T\f$ and three velocity components \f$(v_x,v_y,v_z)\f$ at these data points. \f$(x,y,z)\f$ should be in Mm (megameter), \f$n_\mathrm{e}\f$ in \f$\mbox{cm}^{-3}\f$, temperature \f$T\f$ in K and the velocity components should have units m/s.

Then, a new grid is generated in the observation reference frame \f$(x',y',z')\f$. The grid points in this new, "observational" grid are called voxels. The resolution of the new grid is set by the user, with the FoMo::FoMoObject member function FoMo::FoMoObject.setresolution(). The choice for the resolution in the \f$z'-\f$direction (\f$\Delta l\f$) should be close to the numerical resolution of the input model, as otherwise emission features may be missed in the forward models. 
The numerical resolution of the forward model is not related to the instrument resolution. The numerical resolution is necessary to capture the fine emission features that may be present in the numerical model. The instrument resolution should be simulated by post-processing the forward model with a point spread function (or simply summing pixels to degrade the image). 
At each voxel \f$(x'_i,y'_j,z'_k)\f$, the emissivity is interpolated from the nearest grid point in the \f$(x,y,z)\f$-space and then the LOS integration is performed.

The integral in Eq. 1 is then discretised as follows
\f{equation}{
	I(\lambda,x'_i,y'_j)=\sum_{k} \epsilon(\lambda,x'_i,y'_j,z'_k) \Delta l,
	\label{eq:discrete}
\f}
which converges to the true emission for \f$\Delta l\to 0\f$, thus stressing the need for a high resolution in the \f$z'-\f$direction.

The monochromatic emission is calculated by first converting the physical variables \f$n_\mathrm{e},T\f$ to the emissivity \f$\widetilde{\epsilon}(x,y,z)\f$ (in \f$\mbox{ergs cm}^{-3} \mbox{s}^{-1} \mbox{sr}^{-1}\f$) of the spectral line at rest wavelength \f$\lambda_0\f$ at each grid point by
\f{equation}{
	\widetilde{\epsilon}(x,y,z)=\frac{A_\mathrm{b}}{4\pi} n^2_\mathrm{e}(x,y,z) G_{\lambda_0}(n_\mathrm{e}(x,y,z),T(x,y,z)),
	\label{eq:contrib}
\f}
where \f$A_\mathrm{b}\f$ is the abundance of the emitting element (with respect to hydrogen) and \f$G_{\lambda_0}\f$ the contribution function for that specific spectral line (including the Gaunt factor and oscillator strength for the spectral line). 
The \f$G_{\lambda_0}\f$ is calculated by a look-up table (see the tables list on the wiki webpage at <a>https://wiki.esat.kuleuven.be/FoMo/GeneratingTables</a>), selected by FoMo::FoMoObject.setchiantifile(). The look-up tables were generated for a range of temperatures and densities using g_of_t.pro in the CHIANTI database. This routine assumes that the plasma satisfies the coronal approximation, in particular, that electrons and protons have the same temperature and that the plasma is in ionisation equilibrium. For the latter, the chianti.ioneq is used by default. Moreover, the emission tables were generated with the assumption that the spectral lines are collisionally excited. 
Some included line emission (such as HeII, MgII) is often observed to be optically thick. The users of the code need to ensure that the considered model (and its expected emission) is in the optically thin regime for these spectral lines, and the assumption of ionisation equilibrium is not too stringent for the modelled environment.
The abundance \f$A_\mathrm{b}\f$ is read from a CHIANTI abundance file. As a standard sun_coronal_2012_schmelz.abund is used, but it may be swapped with another file if needed by FoMo::FoMoObject.setabundfile().

We compute the full-width half-maximum of the spectral line \f$\lambda_\mathrm{w}\f$ (or width of Gaussian \f$\sigma_\mathrm{w}\f$) from the temperature by 
\f{equation}{
	\lambda_\mathrm{w}=2\sqrt{2\ln{2}}\frac{v_\mathrm{th}}{c}\lambda_0=2\sqrt{2\ln{2}}\sqrt{\frac{kT}{\mu_{\lambda_0}m_\mathrm{p}}}\frac{\lambda_0}{c},\mbox{ equivalent to taking } \sigma_\mathrm{w}=\frac{v_\mathrm{th}}{c}\frac{\lambda_0}{\sqrt{2}},
	\label{eq:lambdaw}
\f}
where \f$k\f$ is the Boltzmann constant, \f$c\f$ is the speed of light, \f$m_\mathrm{p}\f$ is the mass of a proton, \f$\mu_{\lambda_0}\f$ is the atomic weight (in proton masses) of the emitting element and \f$v_\mathrm{th}=\sqrt{\frac{2kT}{\mu_{\lambda_0}m_\mathrm{p}}}\f$ is the thermal velocity. This is done at each voxel.
Thus, in this first step of the computation FoMo::FoMoObject.render(), the physical variables \f$n_\mathrm{e},T\f$ are converted to \f$\widetilde{\epsilon},\lambda_\mathrm{w}\f$, and is stored as FoMo::FoMoObject.goftcube.

In the second step of FoMo::FoMoObject.render(), the integration along the LOS is performed. At each voxel, the emissivity, spectral line width and velocity \f$\widetilde{\epsilon},\lambda_\mathrm{w},\vec{v}\f$ are interpolated from its nearest neighbour in the \f$(x,y,z)\f$ grid. Then the wavelength dependence of the monochromatic emissivity is calculated by taking a Gaussian shaped spectral line with the correct thermal line width (Eq. 5) and the local Doppler shift. 
\f{align}{
	\epsilon(\lambda,x',y',z')&=\frac{2\sqrt{2\ln{2}}}{\sqrt{2\pi}\lambda_\mathrm{w}}\widetilde{\epsilon}(x',y',z') \exp{\left(-\frac{4\ln{2}}{\lambda^2_\mathrm{w}}\left(\lambda-\lambda_0\left(1-\vec{z'}\cdot \vec{v}/c\right)\right)^2\right)}\\
	&=\frac{1}{\sigma_\mathrm{w}\sqrt{2\pi}}\widetilde{\epsilon}(x',y',z') \exp{\left(-\frac{1}{2 \sigma^2_\mathrm{w}}\left(\lambda-\lambda_0\left(1-\vec{z'}\cdot \vec{v}/c\right)\right)^2\right)}
	\label{eq:gauss}
\f}
The local Doppler shift is calculated by projecting the local velocity \f$\vec{v}\f$ onto a unit vector \f$\vec{z'}\f$ along the LOS, given by 
\f{equation}{
	\vec{z'}=\begin{pmatrix}\sin{b}\cos{l}\\ -\sin{b}\sin{l}\\ \cos{b}\end{pmatrix}.
	\label{eq:los}
\f}
as can be readily derived from Eq. 2.
The velocity projection is done in each grid point, and then the value is interpolated to the forward modelling grid.
After summation with Eq. 3, the specific intensity \f$I(\lambda,x'_i,y'_j)\f$ is returned as a result of the second step in the code, and is stored as FoMo::FoMoObject.rendering. This specific intensity can then be read out and fitted with a Gaussian in order to obtain intensity, Doppler shift and line width.

For the calculation of emission in the imaging telescopes of SDO/AIA, we have computed instrument response functions \f$\kappa_\alpha(n_\mathrm{e},T)\f$ for bandpass \f$\alpha\f$ on a grid of densities \f$n_\mathrm{e}\f$ and temperatures \f$T\f$ (see <a>https://wiki.esat.kuleuven.be/FoMo/GeneratingTables</a>). This feature can be used by setting FoMo::FoMoObject.setobservationtype() to FoMo::Imaging and using the appropriate emission file (set by FoMo::FoMoObject.setchiantifile()). The instrument response is then computed by
\f{equation}{
	\kappa_\alpha(n_\mathrm{e},T)=\int_\lambda G(\lambda,n_\mathrm{e},T) R_\alpha(\lambda) d\lambda,
\f}
where \f$R_\alpha\f$ is the wavelength-dependent response function of bandpass \f$\alpha\f$. Then, the instrument response in the image plane of the forward model is obtained through integrating \f$\kappa_\alpha\f$ over the LOS. Thus, the equivalent for Eq. 3 for the imaging telescope is
\f{equation}{
	I(x'_i,y'_j)=\sum_{k} \kappa_\alpha(x'_i,y'_j,z'_k) \Delta l,
\f}
in which the emissivity was replaced by the instrument response function. 

\section Installation

\subsection Prerequisites

To install FoMo, you first need to install autoconf-archive (or download <a href="http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_prog_doxygen.m4">ax_prog_doxygen.m4</a> to fomo-c/m4), the boost library (at least version 1.54) and the 
<a href="http://www.gnu.org/software/gsl/">GNU scientific library</a>.\n
Some parts of the code require a c++ compiler with the C++11 standard. For <a href="http://gcc.gnu.org">gcc</a>, this means that it needs 
to be at least 4.7. \n
This code documentation is generated with doxygen. At least version 1.7.5 is required.\n
If you want to use the CGAL triangulation for the emission interpolation, then you should install the 
<a href="http://www.cgal.org">CGAL</a> library. It is available for most Linux distributions. If you want CGAL to use parallel 
triangulation, please install <a href="https://www.threadingbuildingblocks.org/">Intel Thread Building Blocks</a>. If parallel 
triangulation is desired, CGAL should have version 4.5 or higher.\n
If you want to use the RegularGridRenderer (renderer with GPU acceleration with some level of real-time rendering capabilities), then you should install
<a href="https://www.khronos.org/opencl/">OpenCL</a>.

\subsection code Obtaining the code

The FoMo code may be obtained from the Github repository by
\code{.sh}
	mkdir fomo
	cd fomo
	git init
	git remote add -f origin https://github.com/TomVeeDee/FoMo.git
	git config core.sparseCheckout true
\endcode
Then you select which components of FoMo you need. For FoMo-C, you would select "fomo-c" and "chiantitables". You can also add "FoMo-GS" or "fomo-idl".
\code{.sh}
	echo "fomo-c" >> .git/info/sparse-checkout
	echo "chiantitables" >> .git/info/sparse-checkout
\endcode
Then you can download the files with
\code{.sh}
	git pull origin master
\endcode
Alternatively, you may extract the FoMo tarball (<a href='https://github.com/TomVeeDee/FoMo/archive/vVERSION.tar.gz'>FoMo-VERSION.tar.gz</a>) instead of the git pull:\n
\code{.sh}
	tar -xvf FoMo-VERSION.tar.gz
\endcode
After this, move to the fomo-c subdirectory.
\code{.sh}
	cd fomo-c
\endcode


\subsection compilation Compilation

\subsubsection firsttime First time only

Just after downloading the code, you need to prepare the autotools (autoconf, autoheader, automake, libtool), which FoMo uses to manage the compilation process. This is done by subsequently running
\code{.sh}
	libtoolize
	aclocal -I m4/
	autoheader
	automake --add-missing
	autoconf
\endcode
I needed to install the package autoconf-archive to successfully run this. If you cannot easily install this package, you may alternatively download the file <a href="http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_prog_doxygen.m4">ax_prog_doxygen.m4</a> to the folder fomo-c/m4.

\subsubsection compflags Setting the compilation flags

The compilation options are set with the configure command. All possible options are listed in the help:

\code{.sh}
	./configure --help
\endcode

On my computer, I run 
\code{.sh}
CXXFLAGS="-O2 -g -Wall -march=core2 -fopenmp" ./configure --prefix=`pwd` --libdir=`pwd` --includedir=`pwd` --bindir=`pwd`
\endcode
The first variable CXXFLAGS sets the compilation flags. Especially -O2 and -fopenmp are important to enable essential speed-ups (-O2) and parallelisation (-fopenmp).\n
The last parts (prefix, libdir, includedir, bindir) tell configure where to install FoMo. If you do not specify these, then the code will be installed in standard paths, such as /usr/include, /usr/lib, etc. In the above example, I just specify that I want the FoMo-library to be installed in the current directory (`pwd`), rather than system-wide.\n
If your CGAL libraries are in a non-standard location, it's possible you need to add 
\code{.sh}
LDFLAGS="-L/path/to/cgal/lib" CPPFLAGS="-I/path/to/cgal/include"
\endcode
Do not forget to set your $LD_LIBRARY_PATH when running the program as well!

If you do not want to link to TBB for parallel triangulation (perhaps because you have not installed them), then you should add --without-tbb after ./configure. For example
\code{.sh}
CXXFLAGS="-O2 -g -Wall -march=core2 -fopenmp" ./configure --prefix=`pwd` --libdir=`pwd` --includedir=`pwd` --bindir=`pwd` --without-tbb
\endcode
If TBB is in a special location, and not in your pkg-config, then you can point FoMo in the right direction by running
\code{.sh}
CXXFLAGS="-O2 -g -Wall -march=core2 -fopenmp" ./configure --prefix=`pwd` --libdir=`pwd` --includedir=`pwd` --bindir=`pwd` --with-tbb=/path/to/tbb
\endcode
Again, you should add the correct path to the $LD_LIBRARY_PATH as well. On my KU Leuven ESAT system, I also need to add CPATH="/users/cpa/tomvd/extrasoft/tbb/tbb43_20140724oss/include:$CPATH".

If you want to compile without OpenCL, you should add the flag --without-opencl.

\subsubsection building Building and installing the code

After setting the compilation flags, building and installing the code is as easy as
\code{.sh}
	make -j4
	make install
\endcode
where the -j4 indicates how many parallel compilation process you want to have. My computer has 4 cores, so I choose 4.\n

FoMo installs 4 files:
- FoMo.h
- libFoMo.la
- libFoMo-VERSION.so
- libFoMo.so (a link to the previous file)

FoMo.h is installed in the includedir, while the others are installed in the libdir.

\subsection ownprog Making your own program, and link against FoMo.

A good way to start creating your own program is to have a look at the programs in the example directory. Schematically, a FoMo program should follow this set-up:
-# Read in data from simulation
-# Initialize FoMoObject
-# Load data into FoMoObject
-# Set rendering parameters
-# Render
-# Write rendering to disk

Assume now that you have written the code in program.cpp. Additionally, it is assumed that you installed/copied the FoMo-libraries to /path/to/fomolib and the header FoMo.h to /path/to/fomoheader. Then you can compile your code with
\code{.sh}
	g++ -O2 -fopenmp -I/path/to/fomoheader -L/path/to/fomolib -o program program.cpp -lFoMo
\endcode

Then, the program can be run with
\code{.sh}
	./program
\endcode
In case this gives a link error, you may need to add /path/to/fomolib to your $LD_LIBRARY_PATH or you can add the compiler flag
\code{.sh}
	g++ -O2 -fopenmp -I/path/to/fomoheader -L/path/to/fomolib -Wl,-rpath -Wl,/path/to/fomolib -o program program.cpp -lFoMo
\endcode

If you want to use the OpenCL features in FoMo.h, you should also include the config.h header generated by the FoMo compilation process, or manually define the macro HAVE_CL_CL_HPP every time you include FoMo.h.

\section Example

Here we will explain the code in example/example.cpp. It illustrates the most straightforward way to 
use the FoMo library.\n\n 

A data file is included which works with this example programme (example/testfile.txt). It can be run with
\code{.sh}
    example/example example/testfile.txt
\endcode
from the command line in the FoMo main directory.\n\n

Now we will go through the code in the example/example.cpp file, and explain each part of the code.\n

First we need to create the FoMo::FoMoObject, this is the basic object for rendering numerical data.

\snippet example/example.cpp Initialize FoMo

After this, we can start reading in the data. The program in example/example.cpp takes as argument 
the name of a file. This file should contain on each line 3 coordinates (x, y, z, all in megameter Mm),
and 5 variables (n (in cm^-3), T (in Kelvin), vx, vy, vz (in m/s)).

\snippet example/example.cpp Read in data

Now we can set the options for the rendering of the DataCube. 

\snippet example/example.cpp Set rendering options

After this, rendering is as easy as

\snippet example/example.cpp Render

After the rendering, the data will have been written to fomo-example-out.l090b090. One could also explicitly
access the rendering and write out some details about it, or write out to an alternative file fomo-output.txt

\snippet example/example.cpp Details

\subsection idl How to read in the data from the example into IDL

Several routines are provided in the idl subdirectory to read in FoMo output into IDL. Reading in the data from the example above can be achieved with

\code{IDL}
IDL> data=readgoftcube('example/fomo-output.txt')       
IDL> regulargoftcube,data,xvec,yvec,lvec,emiss          
IDL> gaussfitgoftcube,emiss,lvec,peak=peak,doppler=doppler,sigma=sigma,chisq=chisq,int=int
\endcode

Then the peak, int, doppler, sigma, chisq variables are 2D arrays with peak intensity, total intensity, Doppler shift, Doppler width, and chi-squared values. They can be easily visualised with tvscl or surface.

\subsection python How to read in the data from the example into python

Python routines are provided in the python subdirectory to read in FoMo output. Reading in the data from the example can be done with

\code{python}
>>> from python.readfomo import readgoftcube, regulargoftcube, gaussfitgoftcube
>>> txtdata=readgoftcube('fomo-output.dat.gz')
>>> emiss,xvec,yvec,lvec=regulargoftcube(txtdata)
>>> peak,doppler,sigma,chisq,intens=gaussfitgoftcube(emiss,lvec)
\endcode

The results are returned as ndarray. peak is the peak intensity, doppler is the Doppler shift (in km/s), sigma is the line width (in \f$\AA{}\f$), chisq is the sum of squares of differences with the Gauss fit, and intens is the integrated line intensity. 

A possible road to visualisation of the result could be
\code{python}
>>> import matplotlib.pyplot as pl
>>> import numpy as np
>>> import matplotlib.cm as cm
>>> pl.imshow(peak,extent=(np.amin(xvec),np.amax(xvec),np.amin(yvec),np.amax(yvec)),cmap=cm.hot,aspect='auto')
>>> pl.title('peak intensity')
>>> cb=pl.colorbar()
>>> cb.set_label(r'$ergs\ cm^{-2} s^{-1} sr^{-1} \AA{}^{-1}$')
>>> pl.show()
\endcode

Code to display the other variables can be found in the python script python/example.py.

\page RenderMethods Documentation on RenderMethods
\section RenderMethods

The list of currently implemented RenderMethods (to be set with FoMo::FoMoObject.setrendermethod()) can be found in src/fomo-object.cpp.

\snippet src/fomo-object.cpp RenderMethods

\subsection cgal CGAL/CGAL2D

Here we use the <a href="http://www.cgal.org">CGAL</a> library for the interpolation. The grid of the FoMo::GoftCube is triangulated, and 
the points on the rays are located in that triangulation using a nearest neighbour look-up. 

CGAL treats the 3D case, while CGAL2D treats the 2D case. In the CGAL2D case, the z-coordinate of the data points in FoMo::GoftCube are 
not used.

This method uses a lot of memory.

\subsection NearestNeighbour

This rendermethod is independent of CGAL, instead it relies on Boost.rtree (from version 1.54). It works in two steps: first an R-tree is 
constructed from the data points. Then, the nearest points are found via the rtree.query() function. 

The advantage of this method (compared to CGAL) is that the triangulation does not need to be constructed. It turns out that this method
is much faster than CGAL (160s for test problem in Frontiers article, table 2, compared to 1400s with CGAL) and uses less memory. 

\subsection Projection

This rendermethod is independent of any library. It steps through the data points, and projects them onto the rendering plane. This assumes
that all data points (or voxels) have an equal volume (or near enough). Thus, this method does not work for AMR data.

The Projection method is slightly faster than the NearestNeighbour method. For the Frontiers test problem, it takes around 130s.

The user needs to be aware of possible pixelation effects for certain viewing angles (think about driving past a vineyard) if the target 
resolution is taken too fine. Still, the method has some uses when looking along an axis of the simulation box.

Moreover, since the code has no control over the number of pixels along the line-of-sight, it is impossible to guess how long the LOS path
spends in each voxel. Therefore, the rendering returns an intensity, assuming that the z_pixel variable estimates appropriately how many voxels
there are along the LOS. To obtain the correct absolute intensity values, the user should multiply with the length (along the LOS) of 
each voxel (in Mm) and dividing by the (length of datacube along the LOS)/(z_pixel -1) (in Mm).

\subsection RegularGrid

This render method approximates the input data by generating a regular grid aligned with the global coordinate system and setting each grid point's parameters to its nearest neighbour's. Since the regular grid is usually aligned with the input data box, the maximal distance for the nearest neighbour search is set quite high. Using this data structure, each ray can be traced quickly through the grid. This last part is also parallellized (on the GPU) with OpenCL.

Since the standard FoMo rendering API is very general, only few parameters can be controlled this way. For more control over the parameters and the separation of different pre-processing phases and rendering, you should use the API provided by the RegularGridRendererWrapper.

This method is very fast (pre-processing of the test problem takes less than 20 seconds, rendering one frame less than 200ms, details vary a lot based on the chosen parameters) but only solves an approximation of the problem and as such may not be useful for other data. It may also be infeasible to render very fine AMR data with this method, although it is possible in principle. Unfortunately, there still seem to be some memory leaks in the implementation of this method, so that some pre-processing phases allocate memory that will never be freed.

\page fomo-gui Documentation on the FoMo rendering GUI

\section FoMo rendering GUI

\subsection Installation

With the FoMo repository comes a Qt-based GUI for real-time rendering using the RegularGrid rendering method. You can find the source code in fomo-c/gui/fomo-gui. To compile and execute the FoMo rendering GUI, you must have installed Qt (version 5 or higher), GCC (version 4.9 or higher, see <a href="https://github.com/nlohmann/json#supported-compilers">the compilers supported by nlohmann's JSON parser</a>) and a version of the FoMo library with OpenCL features enabled.

The installation process is performed in multiple steps:

-# Edit the fomo-gui.pro file to your needs. Make sure that it includes the lines "LIBS += -L$$PWD/relative/path/to/FoMo/library -lFoMo", "INCLUDEPATH += $$PWD/to/Fomo.h/" and "INCLUDEPATH += $$PWD/to/config.h/" (used for the configuration macros). The file should already contain "CONFIG += c++11", but if this doesn't set the compiler flags correctly (gcc must use C++ 11 or higher) you can also add flags explicitly with the line "QMAKE_CXXFLAGS += FLAGS".
-# Run qmake. On Linux, this is done with the command "qmake fomo-gui.pro -spec linux-g++".
-# Run "make".
-# To run the program, first add the FoMo library to your $LD_LIBRARY_PATH if necessary with "export LD_LIBRARY_PATH='$( pwd )/relative/path/to/FoMo/library:$LD_LIBRARY_PATH'". Then you can run it with "./fomo-gui". Make sure that the file "config.json" is in the working directory!

\subsection Features

The program provides all features offered by the RegularGridRenderer API. You can render input data by going through each tab, adjusting the settings and then letting the program process these settings. After completing the "Rendering settings" tab the program will automatically start rendering three views on the left: the top-left one represents the total emissivity, the top-right one the Doppler shift and the bottom one the spectral line width. You can drag your mouse across one of the views to adjust the l/b-angles and you can scroll while holding your mouse on one of them to zoom in/out. If you are happy with your set-up, you can render the hyperspectral data to a text file using that set-up. Beware that due to current memory leaks in the RegularGridRenderer (I think), adjusting earlier settings and updating them may lead to excessive memory usage.

Currently, the biggest limitation of the FoMo rendering GUI is that only the input format from the Frontiers article test problem is supported. Note that the source code can be adapted to load other formats by changing the Window::readAndPreprocessDataCube() method in window.cpp.

*/
