/**
\mainpage This is the extensive help page for FoMo

\section Implementation

(This is a copy of the "instrument" paper on FoMo, published in Frontiers in Astronomy and Space Sciences. Please refer to the <a href="http://journal.frontiersin.org/article/10.3389/fspas.2016.00004/full">open access publication</a>.)

The problem of generating of a synthetic image seen by a telescope or spectrograph can be split into two: 
- calculation of plasma emission in a particular spectral line or a passband of a telescope;
- calculation of how a given imaging instrument sees the plasma, with taking into account its optical characteristics, e.g. aperture area, pixel size, focal length, sensitivity etc. 

\subsection emissivity Plasma emission

The emissivity of coronal plasma \f$\widetilde{\epsilon}_{\lambda_0}\f$ [\f$\mbox{erg s}^{-1}\mbox{ cm}^{-3}\mbox{ sr}^{-1}\f$] in a given monochromatic spectral line \f$\lambda_0\f$ can be obtained from plasma parameters --- temperature \f$T\f$, density \f$n_e\f$, chemical abundances, and atomic coefficients such as excitation cross-section. We imply that the corona is optically thin, and thus we can project plasma emission into the plane of sky:
\f{equation}{
	I_{\lambda_0}(x',y') = \int \widetilde{\epsilon}_{\lambda_0}(x',y',z') dz'
\f}
where \f$I_{\lambda_0}\f$ [\f$\mbox{ergs s}^{-1} \mbox{ cm}^{-2} \mbox{ sr}^{-1}\f$]  is the specific intensity, or surface brightness, \f$(x',y')\f$ are the coordinates in the plane of sky, and the integration is performed along the LOS, that coincide with the \f$z'\f$-axis. The reference frame \f$(x',y',z')\f$ should not necessarily coincide with the reference frame of the simulation \f$(x,y,z)\f$.

The emissivity \f$\widetilde{\epsilon}_{\lambda_0}\f$ of plasma at a given spectral line \f$\lambda_0\f$ is calculated as: 
\f{equation}{
	\widetilde{\epsilon}_{\lambda_0}=G_{\lambda_0}(T,n_\mathrm{e}) n^2_\mathrm{e},
	\label{eq:contrib}
\f}
where \f$G_{\lambda_0}\f$ [\f$\mbox{erg s}^{-1} \mbox{ cm}^3 \mbox{ sr}^{-1}\f$] is the so called contribution function for that specific spectral line, and depends upon excitation/de-excitation cross-sections, abundances, atomic term structure, plasma parameters. The contribution functions are pre-calculated using CHIANTI package and used as look-up tables in the code. There are various definitions of the contribution function in the literature, that do not include abundances directly, or do not include \f$\frac{1}{4\pi}\f$ factor; we use the former definition.

? Assumptions... Thin plasma, ionization equilibria, \f$T_{ions}=T_{el}\f$. ? Refer to some spectroscopic paper ?

The two equations 1.1 and 1.2 can be combined:
\f{equation}{
	I_{\lambda_0}(x',y') = \int G_{\lambda_0}(T,n_e) n_e^2 dz',
\f} 
and it is implied that values \f$T\f$ and \f$n_e\f$ are taken at a point with coordinates \f$(x',y',z')\f$.

\subsection imaging Imaging with a telescope

The significant difference with the previous part is that usually a telescope spectral passband is wide enough, and many spectral lines contribute to a signal in a single pixel. Thus spectral integration should be performed at some step.

Another difference is that when one considers a particular telescope, he implies also other parameters, like focal length or pixel plate scale, aperture size (similar telescope with larger aperture will register higher signal) etc. These parameters determine the level of signal registered in a given pixel. The final units are expressed not in surface brightness [\f$\mbox{ergs s}^{-1} \mbox{ cm}^{-2} \mbox{ sr}^{-1}\f$], but in [\f$\mbox{DN s}^{-1} \mbox{ pixel}^{-1}\f$].

<!-- When one considers how a telescope registers an image, it is convenient to split the process in two steps:
- Ideal imaging system forms an image from the plane of sky in the plane of detector. The image in the detector plane is rescaled depending upon \f$f\f$ --- focal length of the telescope and \f$L\f$ --- distance between the telescope and plasma, the intensity also depends on the telescope aperture area \f$A\f$;
- Real parameters of the telescope are taken into account, such as finite optical transmission, sensitivity of the detector, pixel size etc.
-->

Let's take the following parameters: \f$f\f$ [\f$\mbox{mm}\f$] --- focal distance of the telescope, \f$L\f$ [\f$\mbox{cm}\f$] --- distance between the telescope and plasma, \f$A=\frac{\pi D^2}{4}\f$ [\f$\mbox{cm}^2\f$] --- telescope aperture area, \f$dx\f$ [\f$\mbox{mm}\f$] --- linear pixel size of the detector, transmission of the optical system \f$T(\lambda)\f$. Let's also consider particular wavelength \f$\lambda_0\f$. A given pixel on the detector will receive all the photons from a particular area \f$S=\left( \frac{dx}{f}L \right)^2\f$ [\f$\mbox{cm}^2\f$] on the plane of sky that are emitted into \f$\Omega=\frac{A}{L^2}\f$ [\f$\mbox{sr}\f$] --- the solid angle that corresponds to the aperture of the telescope. Thus the number of received photons is calculated as:
\f{equation}{
  N = B_{\lambda_0} \cdot \Omega \cdot S \cdot T(\lambda) = B_{\lambda_0} \cdot A \cdot \left(\frac{dx}{f}\right)^2 \cdot T(\lambda_0),
\f}
where \f$B_{\lambda_0}=\frac{h\lambda}{c} I_{\lambda_0}\f$ [\f$\mbox{photons s}^{-1} \mbox{ cm}^{-2} \mbox{ sr}^{-1}\f$] --- is the specific intensity expressed in photons, the factor \f$\left( \frac{dx}{f} \right)^2\f$ [\f$\mbox{sr}\f$] denotes solid angle that corresponds to a pixel.  Worthing to note that \f$\mbox{N}\f$ has units [\f$\mbox{photons s}^{-1} \mbox{synth. pixel}^{-1}\f$], i.e. number of photons that receives synthetic pixel with linear size \f$\mbox{dx}\f$ or angular size \f$\left( \frac{dx}{f} \right)\f$. The formula automatically takes into account distance L, scaling of image etc.

<!--Note that \f$A\cdot \left(\frac{dx}{f}\right)^2\f$ is purely geometrical factor, i.e. corresponds to an ideal imaging system, whereas \f$T(\lambda_0)\f$ reflect actual transmission. Other effects, such as final width of PSF can be taken into account at further steps.-->

![How a telescope registers an image](./imaging_via_telescope2.png)

Below we take spectral transmission into account. The optical throughput and the detector sensitivity strictly depend on \f$\lambda\f$. Let's denote with \f$\kappa(\lambda)\f$ [\f$\mbox{DN photon}^{-1}\f$] sensitivity of the detector. One usually introduces factor \f$ A'(\lambda)=A T(\lambda) \kappa(\lambda)\f$ [\f$\mbox{cm}^2 \mbox{ DN photon}^{-1}\f$] called "effective area", which stores most of the telescope spectral and sensitivity. 

Now Eqs. 1.4, and 1.5 can be combined:
\f{equation}{
  N = \int_\lambda B_\lambda A'(\lambda) \left(\frac{dx}{f}\right)^2 d\lambda = \int_{\Delta z} \int_\lambda G_\lambda(T,n_e) n_e^2 A'(\lambda) \left(\frac{dx}{f}\right)^2 d\lambda dz' = \left(\frac{dx}{f}\right)^2 \int_{\Delta z} \widetilde{G}(T,n_e) n_e^2 dz',
\f}
where \f$\widetilde{G}(T,n_e)=\int_\lambda G_\lambda(T,n_e)A'(\lambda) d\lambda\f$ reflects convolution with spectral sensitivity of the telescope, and N has units [\f$\mbox{DN s}^{-1} \mbox{ synth. pixel}^{-1}\f$]. Note that the Eq. 1.5 resembles Eq. 1.3, however here \f$\widetilde{G}(T,n_e)\f$ has units [\f$\mbox{DN s}^{-1} \mbox{ cm}^5 \mbox{ sr}^{-1}\f$].

In the imaging regime we store pre-calculated \f$\widetilde{G}(T,n_e)\f$ functions, in take into account factor \f$\left(\frac{dx}{f}\right)^2\f$ inside FoMo. Such an approach allows to make sub-resolution synthetic images. In order to compare subresolution synthetic image with observational data, one shall reduce the synthetic image with integration signal over neighbouring pixel.  

\subsection software Software implementation

Depending on the regime, FoMo calculates either integral from Eq. 1.3 (spectroscopic regime) or Eq. 1.5 (imaging regime). The mathematical implementation of the integral is the same in both regimes, and the obtained units depend on the units of stored \f$G(T,n_e)\f$ tables.

The essential thing is that the two coordinate systems --- of the simulation \f$(x,y,z)\f$ and the "observational" \f$(x',y',z')\f$  need not to coincide. The two coordinate systems are connected by two rotations, first an angle \f$l\f$ around the \f$z\f$-axis, then around an angle \f$-b\f$ around the \f$y\f$-axis:
\f{equation}{
	\begin{pmatrix} x' \\ y' \\ z'\end{pmatrix}=\begin{pmatrix} \cos{b} & 0 & -\sin{b} \\ 0&1&0\\ \sin{b} & 0 & \cos{b}\end{pmatrix}\begin{pmatrix} \cos{l} & -\sin{l} &0\\ \sin{l} & \cos{l} &0\\ 0&0&1\end{pmatrix} \begin{pmatrix} x\\y\\z\end{pmatrix}.
	\label{eq:angle}
\f}
The viewing angles are set as argument of the FoMo::FoMoObject.render() function.
The simulation box with grid \f$(x,y,z)\f$ is considered as the input, and is the data for which the forward model needs to be computed. There the input model needs to contain the \f$x-, y-, z-\f$coordinates of each data point, and specify the number density \f$n_\mathrm{e}\f$, the temperature \f$T\f$ and three velocity components \f$(v_x,v_y,v_z)\f$ at these data points. \f$(x,y,z)\f$ should be in Mm (megameter), \f$n_\mathrm{e}\f$ in \f$\mbox{cm}^{-3}\f$, temperature \f$T\f$ in K and the velocity components should have units m/s.

Then, a new grid is generated in the observation reference frame \f$(x',y',z')\f$. The grid points in this new, "observational" grid are called voxels. The resolution of the new grid is set by the user, with the FoMo::FoMoObject member function FoMo::FoMoObject.setresolution(). The integrals from Eqs. 1.3 or 1.5 are discretised as follows:
\f{equation}{
	I_{\lambda_0}(x'_i,y'_j)=\sum_{k} \widetilde{\epsilon}_{\lambda_0}(x'_i,y'_j,z'_k) \Delta l=\sum_{k} G_{\lambda_0}(T,n_e) n_e^2 \Delta l,
	\label{eq:discrete}
\f}
where \f$T\f$ and \f$n_e\f$ are taken at the coordinates \f$(x'_i,y'_j,z'_k)\f$.

The choice for the resolution in the \f$z'-\f$direction (\f$\Delta l\f$) should be close to the numerical resolution of the input model, as otherwise emission features may be missed in the forward models. 
The numerical resolution of the forward model is not related to the instrument resolution. The numerical resolution is necessary to capture the fine emission features that may be present in the numerical model. The instrument resolution should be simulated by post-processing the forward model with a point spread function (or simply summing pixels to degrade the image). 
At each voxel \f$(x'_i,y'_j,z'_k)\f$, the emissivity is interpolated from the nearest grid point in the \f$(x,y,z)\f$-space and then the LOS integration is performed.

<!--The integral in Eq. 1 is then discretised as follows
\f{equation}{
	I(\lambda,x'_i,y'_j)=\sum_{k} \epsilon(\lambda,x'_i,y'_j,z'_k) \Delta l,
	\label{eq:discrete}
\f}
which converges to the true emission for \f$\Delta l\to 0\f$, thus stressing the need for a high resolution in the \f$z'-\f$direction.

The monochromatic emission is calculated by first converting the physical variables \f$n_\mathrm{e},T\f$ to the emissivity \f$\widetilde{\epsilon}(x,y,z)\f$ (in \f$\mbox{ergs cm}^{-3} \mbox{s}^{-1} \mbox{sr}^{-1}\f$) of the spectral line at rest wavelength \f$\lambda_0\f$ at each grid point by
\f{equation}{
	\widetilde{\epsilon}(x,y,z)=\frac{A_\mathrm{b}}{4\pi} n^2_\mathrm{e}(x,y,z) G_{\lambda_0}(n_\mathrm{e}(x,y,z),T(x,y,z)),
	\label{eq:contrib}
\f}
where \f$A_\mathrm{b}\f$ is the abundance of the emitting element (with respect to hydrogen) and \f$G_{\lambda_0}\f$ the contribution function for that specific spectral line (including the Gaunt factor and oscillator strength for the spectral line).
-->

 
The \f$G_{\lambda_0}(T,n_e)\f$ or \f$\widetilde{G}(T,n_e)\f$ are calculated by a look-up table (see the tables list on the wiki webpage at <a>https://wiki.esat.kuleuven.be/FoMo/GeneratingTables</a>), selected by FoMo::FoMoObject.setchiantifile(). The look-up tables were generated for a range of temperatures and densities using gofnt.pro in the CHIANTI database. The procedure implies particular abundance, electrons and protons have the same temperature and that the plasma is in ionisation equilibrium. For the latter, the chianti.ioneq is used by default.  
Some included line emission (such as HeII, MgII) is often observed to be optically thick. The users of the code need to ensure that the considered model (and its expected emission) is in the optically thin regime for these spectral lines, and the assumption of ionisation equilibrium is not too stringent for the modelled environment.
The abundance \f$A_\mathrm{b}\f$ is read from a CHIANTI abundance file. As a standard sun_coronal_2012_schmelz.abund is used, but it may be swapped with another file if needed by FoMo::FoMoObject.setabundfile().

We compute the full-width half-maximum of the spectral line \f$\lambda_\mathrm{w}\f$ (or width of Gaussian \f$\sigma_\mathrm{w}\f$) from the temperature by 
\f{equation}{
	\lambda_\mathrm{w}=2\sqrt{2\ln{2}}\frac{v_\mathrm{th}}{c}\lambda_0=2\sqrt{2\ln{2}}\sqrt{\frac{kT}{\mu_{\lambda_0}m_\mathrm{p}}}\frac{\lambda_0}{c},\mbox{ equivalent to taking } \sigma_\mathrm{w}=\frac{v_\mathrm{th}}{c}\frac{\lambda_0}{\sqrt{2}},
	\label{eq:lambdaw}
\f}
where \f$k\f$ is the Boltzmann constant, \f$c\f$ is the speed of light, \f$m_\mathrm{p}\f$ is the mass of a proton, \f$\mu_{\lambda_0}\f$ is the atomic weight (in proton masses) of the emitting element and \f$v_\mathrm{th}=\sqrt{\frac{2kT}{\mu_{\lambda_0}m_\mathrm{p}}}\f$ is the thermal velocity. This is done at each voxel.
Thus, in this first step of the computation FoMo::FoMoObject.render(), the physical variables \f$n_\mathrm{e},T\f$ are converted to \f$\widetilde{\epsilon},\lambda_\mathrm{w}\f$, and is stored as FoMo::FoMoObject.goftcube.

In the second step of FoMo::FoMoObject.render(), the integration along the LOS is performed. At each voxel, the emissivity, spectral line width and velocity \f$\widetilde{\epsilon},\lambda_\mathrm{w},\vec{v}\f$ are interpolated from its nearest neighbour in the \f$(x,y,z)\f$ grid. Then the wavelength dependence of the monochromatic emissivity is calculated by taking a Gaussian shaped spectral line with the correct thermal line width (Eq. 1.8) and the local Doppler shift. 
\f{align}{
	\epsilon(\lambda,x',y',z')&=\frac{2\sqrt{2\ln{2}}}{\sqrt{2\pi}\lambda_\mathrm{w}}\widetilde{\epsilon}_{\lambda_0}(x',y',z') \exp{\left(-\frac{4\ln{2}}{\lambda^2_\mathrm{w}}\left(\lambda-\lambda_0\left(1-\vec{z'}\cdot \vec{v}/c\right)\right)^2\right)}\\
	&=\frac{1}{\sigma_\mathrm{w}\sqrt{2\pi}}\widetilde{\epsilon}_{\lambda_0}(x',y',z') \exp{\left(-\frac{1}{2 \sigma^2_\mathrm{w}}\left(\lambda-\lambda_0\left(1-\vec{z'}\cdot \vec{v}/c\right)\right)^2\right)}
	\label{eq:gauss}
\f}
The local Doppler shift is calculated by projecting the local velocity \f$\vec{v}\f$ onto a unit vector \f$\vec{z'}\f$ along the LOS, given by 
\f{equation}{
	\vec{z'}=\begin{pmatrix}\sin{b}\cos{l}\\ -\sin{b}\sin{l}\\ \cos{b}\end{pmatrix}.
	\label{eq:los}
\f}
as can be readily derived from Eq. 1.6.
The velocity projection is done in each grid point, and then the value is interpolated to the forward modelling grid.
After summation with Eq. 1.7, the specific intensity \f$I(\lambda,x'_i,y'_j)\f$ is returned as a result of the second step in the code, and is stored as FoMo::FoMoObject.rendering. This specific intensity can then be read out and fitted with a Gaussian in order to obtain intensity, Doppler shift and line width.

For the imaging regime proper \f$\widetilde{G}(T,n_e)\f$ tables were calculated, that take into account spectral sensitivity and aperture size of the telescope. This feature can be used by setting FoMo::FoMoObject.setobservationtype() to FoMo::Imaging and using the appropriate emission file (set by FoMo::FoMoObject.setchiantifile()) 

<!--For the calculation of emission in the imaging telescopes of SDO/AIA, we have computed instrument response functions \f$\kappa_\alpha(n_\mathrm{e},T)\f$ for bandpass \f$\alpha\f$ on a grid of densities \f$n_\mathrm{e}\f$ and temperatures \f$T\f$ (see <a>https://wiki.esat.kuleuven.be/FoMo/GeneratingTables</a>). This feature can be used by setting FoMo::FoMoObject.setobservationtype() to FoMo::Imaging and using the appropriate emission file (set by FoMo::FoMoObject.setchiantifile()). The instrument response is then computed by
\f{equation}{
	\kappa_\alpha(n_\mathrm{e},T)=\int_\lambda G(\lambda,n_\mathrm{e},T) R_\alpha(\lambda) d\lambda,
\f}
where \f$R_\alpha\f$ is the wavelength-dependent response function of bandpass \f$\alpha\f$. Then, the instrument response in the image plane of the forward model is obtained through integrating \f$\kappa_\alpha\f$ over the LOS. Thus, the equivalent for Eq. 3 for the imaging telescope is
\f{equation}{
	I(x'_i,y'_j)=\sum_{k} \kappa_\alpha(x'_i,y'_j,z'_k) \Delta l,
\f}
in which the emissivity was replaced by the instrument response function. 
-->

\section Installation

\subsection Prerequisites

To install FoMo, you first need to install autoconf-archive (or download <a href="http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_prog_doxygen.m4">ax_prog_doxygen.m4</a> to fomo-c/m4), the boost library (at least version 1.54) and the 
<a href="http://www.gnu.org/software/gsl/">GNU scientific library</a>.\n
Some parts of the code require a c++ compiler with the C++11 standard. For <a href="http://gcc.gnu.org">gcc</a>, this means that it needs 
to be at least 4.7. \n
This code documentation is generated with doxygen. At least version 1.7.5 is required.\n
If you want to use the CGAL triangulation for the emission interpolation, then you should install the 
<a href="http://www.cgal.org">CGAL</a> library. It is available for most Linux distributions. If you want CGAL to use parallel 
triangulation, please install <a href="https://www.threadingbuildingblocks.org/">Intel Thread Building Blocks</a>. If parallel 
triangulation is desired, CGAL should have version 4.5 or higher.\n

\subsection code Obtaining the code

The FoMo code may be obtained from the Github repository by
\code{.sh}
	mkdir fomo
	cd fomo
	git init
	git remote add -f origin https://github.com/TomVeeDee/FoMo.git
	git config core.sparseCheckout true
\endcode
Then you select which components of FoMo you need. For FoMo-C, you would select "fomo-c" and "chiantitables". You can also add "FoMo-GS" or "fomo-idl".
\code{.sh}
	echo "fomo-c" >> .git/info/sparse-checkout
	echo "chiantitables" >> .git/info/sparse-checkout
\endcode
Then you can download the files with
\code{.sh}
	git pull origin master
\endcode
Alternatively, you may extract the FoMo tarball (<a href='https://github.com/TomVeeDee/FoMo/archive/vVERSION.tar.gz'>FoMo-VERSION.tar.gz</a>) instead of the git pull:\n
\code{.sh}
	tar -xvf FoMo-VERSION.tar.gz
\endcode
After this, move to the fomo-c subdirectory.
\code{.sh}
	cd fomo-c
\endcode


\subsection compilation Compilation

\subsubsection firsttime First time only

Just after downloading the code, you need to prepare the autotools (autoconf, autoheader, automake, libtool), which FoMo uses to manage the compilation process. This is done by subsequently running
\code{.sh}
	libtoolize
	aclocal -I m4/
	autoheader
	automake --add-missing
	autoconf
\endcode
I needed to install the package autoconf-archive to successfully run this. If you cannot easily install this package, you may alternatively download the file <a href="http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_prog_doxygen.m4">ax_prog_doxygen.m4</a> to the folder fomo-c/m4.

\subsubsection compflags Setting the compilation flags

The compilation options are set with the configure command. All possible options are listed in the help:

\code{.sh}
	./configure --help
\endcode

On my computer, I run 
\code{.sh}
CXXFLAGS="-O2 -g -Wall -march=core2 -fopenmp" ./configure --prefix=`pwd` --libdir=`pwd` --includedir=`pwd` --bindir=`pwd`
\endcode
The first variable CXXFLAGS sets the compilation flags. Especially -O2 and -fopenmp are important to enable essential speed-ups (-O2) and parallelisation (-fopenmp).\n
The last parts (prefix, libdir, includedir, bindir) tell configure where to install FoMo. If you do not specify these, then the code will be installed in standard paths, such as /usr/include, /usr/lib, etc. In the above example, I just specify that I want the FoMo-library to be installed in the current directory (`pwd`), rather than system-wide.\n
If your CGAL libraries are in a non-standard location, it's possible you need to add 
\code{.sh}
LDFLAGS="-L/path/to/cgal/lib" CPPFLAGS="-I/path/to/cgal/include"
\endcode
Do not forget to set your $LD_LIBRARY_PATH when running the program as well!

If you do not want to link to TBB for parallel triangulation (perhaps because you have not installed them), then you should add --without-tbb after ./configure. For example
\code{.sh}
CXXFLAGS="-O2 -g -Wall -march=core2 -fopenmp" ./configure --prefix=`pwd` --libdir=`pwd` --includedir=`pwd` --bindir=`pwd` --without-tbb
\endcode
If TBB is in a special location, and not in your pkg-config, then you can point FoMo in the right direction by running
\code{.sh}
CXXFLAGS="-O2 -g -Wall -march=core2 -fopenmp" ./configure --prefix=`pwd` --libdir=`pwd` --includedir=`pwd` --bindir=`pwd` --with-tbb=/path/to/tbb
\endcode
Again, you should add the correct path to the $LD_LIBRARY_PATH as well. On my KU Leuven ESAT system, I also need to add CPATH="/users/cpa/tomvd/extrasoft/tbb/tbb43_20140724oss/include:$CPATH".

\subsubsection building Building and installing the code

After setting the compilation flags, building and installing the code is as easy as
\code{.sh}
	make -j4
	make install
\endcode
where the -j4 indicates how many parallel compilation process you want to have. My computer has 4 cores, so I choose 4.\n

FoMo installs 4 files:
- FoMo.h
- libFoMo.la
- libFoMo-VERSION.so
- libFoMo.so (a link to the previous file)

FoMo.h is installed in the includedir, while the others are installed in the libdir.

\subsection ownprog Making your own program, and link against FoMo.

A good way to start creating your own program is to have a look at the programs in the example directory. Schematically, a FoMo program should follow this set-up:
-# Read in data from simulation
-# Initialize FoMoObject
-# Load data into FoMoObject
-# Set rendering parameters
-# Render
-# Write rendering to disk

Assume now that you have written the code in program.cpp. Additionally, it is assumed that you installed/copied the FoMo-libraries to /path/to/fomolib and the header FoMo.h to /path/to/fomoheader. Then you can compile your code with
\code{.sh}
	g++ -O2 -fopenmp -I/path/to/fomoheader -L/path/to/fomolib -o program program.cpp -lFoMo
\endcode

Then, the program can be run with
\code{.sh}
	./program
\endcode
In case this gives a link error, you may need to add /path/to/fomolib to your $LD_LIBRARY_PATH or you can add the compiler flag
\code{.sh}
	g++ -O2 -fopenmp -I/path/to/fomoheader -L/path/to/fomolib -Wl,-rpath -Wl,/path/to/fomolib -o program program.cpp -lFoMo
\endcode

\section Example

Here we will explain the code in example/example.cpp. It illustrates the most straightforward way to 
use the FoMo library.\n\n 

A data file is included which works with this example programme (example/testfile.txt). It can be run with
\code{.sh}
    example/example example/testfile.txt
\endcode
from the command line in the FoMo main directory.\n\n

Now we will go through the code in the example/example.cpp file, and explain each part of the code.\n

First we need to create the FoMo::FoMoObject, this is the basic object for rendering numerical data.

\snippet example/example.cpp Initialize FoMo

After this, we can start reading in the data. The program in example/example.cpp takes as argument 
the name of a file. This file should contain on each line 3 coordinates (x, y, z, all in megameter Mm),
and 5 variables (n (in cm^-3), T (in Kelvin), vx, vy, vz (in m/s)).

\snippet example/example.cpp Read in data

Now we can set the options for the rendering of the DataCube. 

\snippet example/example.cpp Set rendering options

After this, rendering is as easy as

\snippet example/example.cpp Render

After the rendering, the data will have been written to fomo-example-out.l090b090. One could also explicitly
access the rendering and write out some details about it, or write out to an alternative file fomo-output.txt

\snippet example/example.cpp Details

\subsection idl How to read in the data from the example into IDL

Several routines are provided in the idl subdirectory to read in FoMo output into IDL. Reading in the data from the example above can be achieved with

\code{IDL}
IDL> data=readgoftcube('example/fomo-output.txt')       
IDL> regulargoftcube,data,xvec,yvec,lvec,emiss          
IDL> gaussfitgoftcube,emiss,lvec,peak=peak,doppler=doppler,sigma=sigma,chisq=chisq,int=int
\endcode

Then the peak, int, doppler, sigma, chisq variables are 2D arrays with peak intensity, total intensity, Doppler shift, Doppler width, and chi-squared values. They can be easily visualised with tvscl or surface.

\subsection python How to read in the data from the example into python

Python routines are provided in the python subdirectory to read in FoMo output. Reading in the data from the example can be done with

\code{python}
>>> from python.readfomo import readgoftcube, regulargoftcube, gaussfitgoftcube
>>> txtdata=readgoftcube('fomo-output.dat.gz')
>>> emiss,xvec,yvec,lvec=regulargoftcube(txtdata)
>>> peak,doppler,sigma,chisq,intens=gaussfitgoftcube(emiss,lvec)
\endcode

The results are returned as ndarray. peak is the peak intensity, doppler is the Doppler shift (in km/s), sigma is the line width (in \f$\AA{}\f$), chisq is the sum of squares of differences with the Gauss fit, and intens is the integrated line intensity. 

A possible road to visualisation of the result could be
\code{python}
>>> import matplotlib.pyplot as pl
>>> import numpy as np
>>> import matplotlib.cm as cm
>>> pl.imshow(peak,extent=(np.amin(xvec),np.amax(xvec),np.amin(yvec),np.amax(yvec)),cmap=cm.hot,aspect='auto')
>>> pl.title('peak intensity')
>>> cb=pl.colorbar()
>>> cb.set_label(r'$ergs\ cm^{-2} s^{-1} sr^{-1} \AA{}^{-1}$')
>>> pl.show()
\endcode

Code to display the other variables can be found in the python script python/example.py.

\page RenderMethods Documentation on RenderMethods
\section RenderMethods

The list of currently implemented RenderMethods (to be set with FoMo::FoMoObject.setrendermethod()) can be found in src/fomo-object.cpp.

\snippet src/fomo-object.cpp RenderMethods

\subsection cgal CGAL/CGAL2D

Here we use the <a href="http://www.cgal.org">CGAL</a> library for the interpolation. The grid of the FoMo::GoftCube is triangulated, and 
the points on the rays are located in that triangulation using a nearest neighbour look-up. 

CGAL treats the 3D case, while CGAL2D treats the 2D case. In the CGAL2D case, the z-coordinate of the data points in FoMo::GoftCube are 
not used.

This method uses a lot of memory.

\subsection NearestNeighbour

This rendermethod is independent of CGAL, instead it relies on Boost.rtree (from version 1.54). It works in two steps: first an R-tree is 
constructed from the data points. Then, the nearest points are found via the rtree.query() function. 

The advantage of this method (compared to CGAL) is that the triangulation does not need to be constructed. It turns out that this method
is much faster than CGAL (160s for test problem in Frontiers article, table 2, compared to 1400s with CGAL) and uses less memory. 

\subsection Projection

This rendermethod is independent of any library. It steps through the data points, and projects them onto the rendering plane. This assumes
that all data points (or voxels) have an equal volume (or near enough). Thus, this method does not work for AMR data.

The Projection method is slightly faster than the NearestNeighbour method. For the Frontiers test problem, it takes around 130s.

The user needs to be aware of possible pixelation effects for certain viewing angles (think about driving past a vineyard) if the target 
resolution is taken too fine. Still, the method has some uses when looking along an axis of the simulation box.

Moreover, since the code has no control over the number of pixels along the line-of-sight, it is impossible to guess how long the LOS path
spends in each voxel. Therefore, the rendering returns an intensity, assuming that the z_pixel variable estimates appropriately how many voxels
there are along the LOS. To obtain the correct absolute intensity values, the user should multiply with the length (along the LOS) of 
each voxel (in Mm) and dividing by the (length of datacube along the LOS)/(z_pixel -1) (in Mm).

*/
